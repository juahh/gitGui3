#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Jan 06, 2019 08:54:08 PM EET  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import unknown6_support
import matplotlib.pyplot as plt
import numpy as np 


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    unknown6_support.set_Tk_var()
    top = Toplevel1 (root)
    unknown6_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    unknown6_support.set_Tk_var()
    top = Toplevel1 (w)
    unknown6_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)
  
    
    def __init__(self, top=None):
        
        def chirpGenerationCallBack(self):
                
                from chirpGeneration import chirpGeneration
                try:
                        f1 = float(self.Entryf0.get())
                        f2 = float(self.Entryf1.get())
                        signalLength = float(self.EntryLength.get())
                        sampleRate = float(self.Entryfs.get())
                        gaussianOn =  self.gaussianVar.get()
                        print(gaussianOn)
                except:
                        print("Inputs not numbers")
                        f1 = float(self.Entryf0.get())
                        f2 = 1
                        signalLength = 1
                        sampleRate = 1
                        gaussianOn =  1 
                        
                
                timevector, chirp  = chirpGeneration(f1, f2, signalLength, sampleRate, gaussianOn)
            
                fig = plt.figure()  # create a figure object
                ax = fig.add_subplot(1, 1, 1)
                ax.plot(timevector,chirp)
                ax.set_ylabel('Voltage')
                ax.set_xlabel('us')
                plotToCanvas(top,fig)
                

      
        def saveAs(self):
                        import Tkinter, tkFileDialog
                        dirname = tkFileDialog.askdirectory(parent=root,initialdir="/",title='Please select a directory')
                        self.SAVEFILEPATH.configure(text=dirname)


            
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1351x738+2164+67")
        top.title("New Toplevel")
        top.configure(highlightcolor="black")

 #       self.Canvas1 = tk.Canvas(top)
 #       self.Canvas1.place(relx=0.222, rely=0.041, relheight=0.869
 #               , relwidth=0.771)
 #       self.Canvas1.configure(borderwidth="2")
 #       self.Canvas1.configure(relief='ridge')
 #       self.Canvas1.configure(selectbackground="#c4c4c4")
 #       self.Canvas1.configure(width=1041)
        def plotToCanvas(self, figure):
                import matplotlib
                matplotlib.use("TkAgg")

                from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg


                self.Canvas1 = FigureCanvasTkAgg(figure, self)
                self.Canvas1.draw()
                self.Canvas1.get_tk_widget().pack()

                self.Canvas1.get_tk_widget().place(relx=0.222, rely=0.041, relheight=0.869, relwidth=0.771)
                
                self.Canvas1.get_tk_widget().configure(borderwidth="2")
                self.Canvas1.get_tk_widget().configure(relief='ridge')
                self.Canvas1.get_tk_widget().configure(selectbackground="#c4c4c4")
                self.Canvas1.get_tk_widget().configure(width=1041)





        self.ReconnectButton = tk.Button(top)
        self.ReconnectButton.place(relx=0.004, rely=0.935, height=31, width=111)
        self.ReconnectButton.configure(activebackground="#f9f9f9")
        self.ReconnectButton.configure(text='''Connect''')

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.607, rely=0.915, relheight=0.075
                , relwidth=0.385)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(text='''Save as''')
        self.Labelframe2.configure(width=520)

        self.SAVEFILEPATH = tk.Message(self.Labelframe2)
        self.SAVEFILEPATH.place(relx=0.192, rely=0.273, relheight=0.455
                , relwidth=0.427, bordermode='ignore')
        self.SAVEFILEPATH.configure(text='''File Path:''')
        self.SAVEFILEPATH.configure(width=222)

        self.BrowseSave = tk.Button(self.Labelframe2)
        self.BrowseSave.place(relx=0.01, rely=0.273, height=31, width=71
                , bordermode='ignore')
        self.BrowseSave.configure(activebackground="#f9f9f9")
        self.BrowseSave.configure(text='''Browse''',  command= lambda: saveAs(self))

        self.SAVEASENTRY = tk.Entry(self.Labelframe2)
        self.SAVEASENTRY.place(relx=0.635, rely=0.364, height=23, relwidth=0.281
                , bordermode='ignore')
        self.SAVEASENTRY.configure(background="white")
        self.SAVEASENTRY.configure(font="TkFixedFont")
        self.SAVEASENTRY.configure(selectbackground="#c4c4c4")

        self.Labelframe2_11 = tk.LabelFrame(top)
        self.Labelframe2_11.place(relx=0.222, rely=0.915, relheight=0.075
                , relwidth=0.377)
        self.Labelframe2_11.configure(relief='groove')
        self.Labelframe2_11.configure(text='''Transmit Signal''')
        self.Labelframe2_11.configure(width=510)

        self.TXSIGNALFILEPATH = tk.Message(self.Labelframe2_11)
        self.TXSIGNALFILEPATH.place(relx=0.196, rely=0.364, relheight=0.455
                , relwidth=0.435, bordermode='ignore')
        self.TXSIGNALFILEPATH.configure(text='''File Path:''')
        self.TXSIGNALFILEPATH.configure(width=222)

        self.BrowseTX = tk.Button(self.Labelframe2_11)
        self.BrowseTX.place(relx=0.01, rely=0.273, height=31, width=71
                , bordermode='ignore')
        self.BrowseTX.configure(activebackground="#f9f9f9")
        self.BrowseTX.configure(text='''Browse''')

        self.TXENTRY = tk.Entry(self.Labelframe2_11)
        self.TXENTRY.place(relx=0.637, rely=0.364, height=23, relwidth=0.286
                , bordermode='ignore')
        self.TXENTRY.configure(background="white")
        self.TXENTRY.configure(font="TkFixedFont")
        self.TXENTRY.configure(selectbackground="#c4c4c4")

        self.TProgressbar1 = ttk.Progressbar(top)
        self.TProgressbar1.place(relx=0.1, rely=0.949, relwidth=0.111
                , relheight=0.0, height=19)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.0, rely=0.014, relheight=0.902
                , relwidth=0.216)
        self.TNotebook1.configure(width=292)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="Controls",compound="left",underline="-1",)
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(1, text="Plot Tools", compound="left", underline="-1"
                ,)
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(2, text="Signal Generation", compound="none"
                ,underline="-1", )

        self.controlFrame = tk.Frame(self.TNotebook1_t0)
        self.controlFrame.place(relx=0.034, rely=0.016, relheight=0.963
                , relwidth=0.938)
        self.controlFrame.configure(relief='groove')
        self.controlFrame.configure(borderwidth="2")
        self.controlFrame.configure(relief='groove')
        self.controlFrame.configure(width=272)

        self.AFrame = tk.LabelFrame(self.controlFrame)
        self.AFrame.place(relx=0.037, rely=0.032, relheight=0.17, relwidth=0.919)

        self.AFrame.configure(relief='groove')
        self.AFrame.configure(text='''A-Scan''')
        self.AFrame.configure(width=250)

        self.StartAButton = tk.Button(self.AFrame)
        self.StartAButton.place(relx=0.02, rely=0.238, height=31, width=71
                , bordermode='ignore')
        self.StartAButton.configure(activebackground="#f9f9f9")
        self.StartAButton.configure(text='''Start''')

        self.SaveButtonA = tk.Checkbutton(self.AFrame)
        self.SaveButtonA.place(relx=0.64, rely=0.238, relheight=0.219
                , relwidth=0.268, bordermode='ignore')
        self.SaveButtonA.configure(activebackground="#f9f9f9")
        self.SaveButtonA.configure(justify='left')
        self.SaveButtonA.configure(text='''Save''')
        self.SaveButtonA.configure(variable=unknown6_support.che54)

        self.NofSavedAScans = tk.Entry(self.AFrame)
        self.NofSavedAScans.place(relx=0.62, rely=0.667, height=23
                , relwidth=0.304, bordermode='ignore')
        self.NofSavedAScans.configure(background="white")
        self.NofSavedAScans.configure(font="TkFixedFont")
        self.NofSavedAScans.configure(selectbackground="#c4c4c4")

        self.NofSignalsASCAN = tk.Message(self.AFrame)
        self.NofSignalsASCAN.place(relx=0.02, rely=0.619, relheight=0.238
                , relwidth=0.568, bordermode='ignore')
        self.NofSignalsASCAN.configure(text='''Number of Signals''')
        self.NofSignalsASCAN.configure(width=142)

        self.Bframe = tk.LabelFrame(self.controlFrame)
        self.Bframe.place(relx=0.037, rely=0.244, relheight=0.17, relwidth=0.919)

        self.Bframe.configure(relief='groove')
        self.Bframe.configure(text='''B-Scan''')
        self.Bframe.configure(width=250)

        self.StartBButton = tk.Button(self.Bframe)
        self.StartBButton.place(relx=0.04, rely=0.19, height=31, width=71
                , bordermode='ignore')
        self.StartBButton.configure(activebackground="#f9f9f9")
        self.StartBButton.configure(text='''Start''')

        self.Message2 = tk.Message(self.Bframe)
        self.Message2.place(relx=0.34, rely=0.238, relheight=0.238
                , relwidth=0.248, bordermode='ignore')
        self.Message2.configure(text='''Distance''')
        self.Message2.configure(width=62)

        self.BDistance = tk.Entry(self.Bframe)
        self.BDistance.place(relx=0.62, rely=0.238, height=23, relwidth=0.304
                , bordermode='ignore')
        self.BDistance.configure(background="white")
        self.BDistance.configure(font="TkFixedFont")
        self.BDistance.configure(selectbackground="#c4c4c4")

        self.Message2_4 = tk.Message(self.Bframe)
        self.Message2_4.place(relx=0.34, rely=0.571, relheight=0.238
                , relwidth=0.248, bordermode='ignore')
        self.Message2_4.configure(text='''Step''')
        self.Message2_4.configure(width=62)

        self.BStep = tk.Entry(self.Bframe)
        self.BStep.place(relx=0.62, rely=0.619, height=23, relwidth=0.304
                , bordermode='ignore')
        self.BStep.configure(background="white")
        self.BStep.configure(font="TkFixedFont")
        self.BStep.configure(selectbackground="#c4c4c4")

        self.SaveButtonB = tk.Checkbutton(self.Bframe)
        self.SaveButtonB.place(relx=0.04, rely=0.571, relheight=0.219
                , relwidth=0.268, bordermode='ignore')
        self.SaveButtonB.configure(activebackground="#f9f9f9")
        self.SaveButtonB.configure(justify='left')
        self.SaveButtonB.configure(text='''Save''')
        self.SaveButtonB.configure(variable=unknown6_support.che54)

        self.CFrame = tk.LabelFrame(self.controlFrame)
        self.CFrame.place(relx=0.037, rely=0.455, relheight=0.268
                , relwidth=0.919)
        self.CFrame.configure(relief='groove')
        self.CFrame.configure(text='''C-Scan''')
        self.CFrame.configure(width=250)

        self.StartCButton = tk.Button(self.CFrame)
        self.StartCButton.place(relx=0.02, rely=0.121, height=31, width=71
                , bordermode='ignore')
        self.StartCButton.configure(activebackground="#f9f9f9")
        self.StartCButton.configure(text='''Start''')

        self.Message2_7 = tk.Message(self.CFrame)
        self.Message2_7.place(relx=0.04, rely=0.364, relheight=0.152
                , relwidth=0.248, bordermode='ignore')
        self.Message2_7.configure(text='''x Dist''')
        self.Message2_7.configure(width=62)

        self.CXDist = tk.Entry(self.CFrame)
        self.CXDist.place(relx=0.04, rely=0.515, height=23, relwidth=0.264
                , bordermode='ignore')
        self.CXDist.configure(background="white")
        self.CXDist.configure(font="TkFixedFont")
        self.CXDist.configure(selectbackground="#c4c4c4")

        self.CXStep = tk.Entry(self.CFrame)
        self.CXStep.place(relx=0.04, rely=0.788, height=23, relwidth=0.264
                , bordermode='ignore')
        self.CXStep.configure(background="white")
        self.CXStep.configure(font="TkFixedFont")
        self.CXStep.configure(selectbackground="#c4c4c4")

        self.CYDist = tk.Entry(self.CFrame)
        self.CYDist.place(relx=0.34, rely=0.515, height=23, relwidth=0.264
                , bordermode='ignore')
        self.CYDist.configure(background="white")
        self.CYDist.configure(font="TkFixedFont")
        self.CYDist.configure(selectbackground="#c4c4c4")

        self.CYStep = tk.Entry(self.CFrame)
        self.CYStep.place(relx=0.34, rely=0.788, height=23, relwidth=0.264
                , bordermode='ignore')
        self.CYStep.configure(background="white")
        self.CYStep.configure(font="TkFixedFont")
        self.CYStep.configure(selectbackground="#c4c4c4")

        self.CZDist = tk.Entry(self.CFrame)
        self.CZDist.place(relx=0.66, rely=0.515, height=23, relwidth=0.264
                , bordermode='ignore')
        self.CZDist.configure(background="white")
        self.CZDist.configure(font="TkFixedFont")
        self.CZDist.configure(selectbackground="#c4c4c4")

        self.CZStep = tk.Entry(self.CFrame)
        self.CZStep.place(relx=0.66, rely=0.788, height=23, relwidth=0.264
                , bordermode='ignore')
        self.CZStep.configure(background="white")
        self.CZStep.configure(font="TkFixedFont")
        self.CZStep.configure(selectbackground="#c4c4c4")

        self.Message2_8 = tk.Message(self.CFrame)
        self.Message2_8.place(relx=0.36, rely=0.364, relheight=0.152
                , relwidth=0.248, bordermode='ignore')
        self.Message2_8.configure(text='''y Dist''')
        self.Message2_8.configure(width=62)

        self.Message2_9 = tk.Message(self.CFrame)
        self.Message2_9.place(relx=0.66, rely=0.364, relheight=0.152
                , relwidth=0.248, bordermode='ignore')
        self.Message2_9.configure(text='''z Dist''')
        self.Message2_9.configure(width=62)

        self.Message2_3 = tk.Message(self.CFrame)
        self.Message2_3.place(relx=0.04, rely=0.667, relheight=0.091
                , relwidth=0.248, bordermode='ignore')
        self.Message2_3.configure(text='''x Step''')
        self.Message2_3.configure(width=62)

        self.Message2_10 = tk.Message(self.CFrame)
        self.Message2_10.place(relx=0.36, rely=0.667, relheight=0.091
                , relwidth=0.248, bordermode='ignore')
        self.Message2_10.configure(text='''y Step''')
        self.Message2_10.configure(width=62)

        self.Message2_6 = tk.Message(self.CFrame)
        self.Message2_6.place(relx=0.66, rely=0.667, relheight=0.091
                , relwidth=0.248, bordermode='ignore')
        self.Message2_6.configure(text='''z Step''')
        self.Message2_6.configure(width=62)

        self.SaveButtonC = tk.Checkbutton(self.CFrame)
        self.SaveButtonC.place(relx=0.64, rely=0.152, relheight=0.139
                , relwidth=0.268, bordermode='ignore')
        self.SaveButtonC.configure(activebackground="#f9f9f9")
        self.SaveButtonC.configure(justify='left')
        self.SaveButtonC.configure(text='''Save''')
        self.SaveButtonC.configure(variable=unknown6_support.che54)

        self.MCConnectedLabel = tk.Label(self.controlFrame)
        self.MCConnectedLabel.place(relx=0.037, rely=0.836, height=21, width=239)

        self.MCConnectedLabel.configure(activebackground="#f9f9f9")
        self.MCConnectedLabel.configure(text='''Motor Controller : Not Connected''')
        self.MCConnectedLabel.configure(width=239)

        self.OscConnectedLabel = tk.Label(self.controlFrame)
        self.OscConnectedLabel.place(relx=0.165, rely=0.885, height=21
                , width=189)
        self.OscConnectedLabel.configure(activebackground="#f9f9f9")
        self.OscConnectedLabel.configure(text='''Oscilloscope : Not Connected''')
        self.OscConnectedLabel.configure(width=189)

        self.AWGConnectedLabel = tk.Label(self.controlFrame)
        self.AWGConnectedLabel.place(relx=0.349, rely=0.933, height=21
                , width=149)
        self.AWGConnectedLabel.configure(activebackground="#f9f9f9")
        self.AWGConnectedLabel.configure(text='''AWG : Not Connected''')
        self.AWGConnectedLabel.configure(width=149)

        self.EnvelopeOn = tk.Checkbutton(self.controlFrame)
        self.EnvelopeOn.place(relx=0.037, rely=0.747, relheight=0.037
                , relwidth=0.32)
        self.EnvelopeOn.configure(activebackground="#f9f9f9")
        self.EnvelopeOn.configure(justify='left')
        self.EnvelopeOn.configure(text='''Envelope''')
        self.EnvelopeOn.configure(variable=unknown6_support.che58)
        self.EnvelopeOn.configure(width=87)

        self.DoXCorr = tk.Checkbutton(self.controlFrame)
        self.DoXCorr.place(relx=0.551, rely=0.747, relheight=0.037
                , relwidth=0.32)
        self.DoXCorr.configure(activebackground="#f9f9f9")
        self.DoXCorr.configure(justify='left')
        self.DoXCorr.configure(text='''Do XCorr''')
        self.DoXCorr.configure(variable=unknown6_support.che59)
        self.DoXCorr.configure(width=87)

        self.Frame2 = tk.Frame(self.TNotebook1_t1)
        self.Frame2.place(relx=0.034, rely=0.016, relheight=0.992
                , relwidth=0.948)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(width=275)

        self.Labelframe3 = tk.LabelFrame(self.Frame2)
        self.Labelframe3.place(relx=0.018, rely=0.016, relheight=0.15
                , relwidth=0.945)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(text='''Color Axis''')
        self.Labelframe3.configure(width=260)

        self.Set_Caxis = tk.Button(self.Frame2)
        self.Set_Caxis.place(relx=0.673, rely=0.087, height=31, width=71)
        self.Set_Caxis.configure(activebackground="#f9f9f9")
        self.Set_Caxis.configure(text='''Set Caxis''')

        self.TEntry2 = ttk.Entry(self.Frame2)
        self.TEntry2.place(relx=0.382, rely=0.102, relheight=0.033
                , relwidth=0.269)
        self.TEntry2.configure(takefocus="")
        self.TEntry2.configure(cursor="xterm")

        self.TEntry1 = ttk.Entry(self.Frame2)
        self.TEntry1.place(relx=0.055, rely=0.102, relheight=0.033
                , relwidth=0.269)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="xterm")

        self.Message3 = tk.Message(self.Frame2)
        self.Message3.place(relx=0.382, rely=0.063, relheight=0.024
                , relwidth=0.262)
        self.Message3.configure(text='''Upper''')
        self.Message3.configure(width=72)

        self.Message3 = tk.Message(self.Frame2)
        self.Message3.place(relx=0.055, rely=0.063, relheight=0.024
                , relwidth=0.262)
        self.Message3.configure(text='''Lower''')
        self.Message3.configure(width=72)

        self.Labelframe6 = tk.LabelFrame(self.Frame2)
        self.Labelframe6.place(relx=0.018, rely=0.173, relheight=0.165
                , relwidth=0.945)
        self.Labelframe6.configure(relief='groove')
        self.Labelframe6.configure(text='''Zoom and Pan''')
        self.Labelframe6.configure(width=260)

        self.zoomButton = tk.Button(self.Labelframe6)
        self.zoomButton.place(relx=0.096, rely=0.333, height=31, width=71
                , bordermode='ignore')
        self.zoomButton.configure(activebackground="#f9f9f9")
        self.zoomButton.configure(text='''Zoom''')

        self.panButton1 = tk.Button(self.Labelframe6)
        self.panButton1.place(relx=0.558, rely=0.333, height=31, width=71
                , bordermode='ignore')
        self.panButton1.configure(activebackground="#f9f9f9")
        self.panButton1.configure(text='''Pan''')

        self.Labelframe4 = tk.LabelFrame(self.TNotebook1_t2)
        self.Labelframe4.place(relx=0.034, rely=0.016, relheight=0.555
                , relwidth=0.931)
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(text='''Parameters''')
        self.Labelframe4.configure(width=270)

        self.Entryf0 = tk.Entry(self.Labelframe4)
        self.Entryf0.place(relx=0.519, rely=0.189, height=23, relwidth=0.43
                , bordermode='ignore')
        self.Entryf0.configure(background="white")
        self.Entryf0.configure(font="TkFixedFont")
        self.Entryf0.configure(selectbackground="#c4c4c4")
        self.Entryf0.configure(width=116)
        self.Entryf0.insert(str(0), "1")

        self.Entryf1 = tk.Entry(self.Labelframe4)
        self.Entryf1.place(relx=0.519, rely=0.34, height=23, relwidth=0.43
                , bordermode='ignore')
        self.Entryf1.configure(background="white")
        self.Entryf1.configure(font="TkFixedFont")
        self.Entryf1.configure(selectbackground="#c4c4c4")
        self.Entryf1.configure(width=116)
        self.Entryf1.insert(str(0), "9")

        self.EntryLength = tk.Entry(self.Labelframe4)
        self.EntryLength.place(relx=0.519, rely=0.491, height=23, relwidth=0.43
                , bordermode='ignore')
        self.EntryLength.configure(background="white")
        self.EntryLength.configure(font="TkFixedFont")
        self.EntryLength.configure(selectbackground="#c4c4c4")
        self.EntryLength.configure(width=116)
        self.EntryLength.insert(str(0), "25")

        self.gaussianVar = tk.IntVar()
        self.GaussianOn = tk.Checkbutton(self.Labelframe4)
        self.GaussianOn.place(relx=0.019, rely=0.849, relheight=0.087
                , relwidth=0.559, bordermode='ignore')
        self.GaussianOn.configure(activebackground="#f9f9f9")
        self.GaussianOn.configure(justify='left')
        self.GaussianOn.configure(text='''Gaussian Envelope''')
        self.GaussianOn.configure(variable = self.gaussianVar)
        self.GaussianOn.configure(width=151)

        

        self.Message3 = tk.Message(self.Labelframe4)
        self.Message3.place(relx=0.074, rely=0.189, relheight=0.094
                , relwidth=0.415, bordermode='ignore')
        self.Message3.configure(text='''Start Freq [MHz]''')
        self.Message3.configure(width=112)

        self.Message3 = tk.Message(self.Labelframe4)
        self.Message3.place(relx=0.074, rely=0.34, relheight=0.094
                , relwidth=0.415, bordermode='ignore')
        self.Message3.configure(text='''Stop Freq [MHz]''')
        self.Message3.configure(width=112)

        self.Message3 = tk.Message(self.Labelframe4)
        self.Message3.place(relx=0.185, rely=0.491, relheight=0.094
                , relwidth=0.304, bordermode='ignore')
        self.Message3.configure(text='''Length [µs]''')
        self.Message3.configure(width=82)

        self.Entryfs = tk.Entry(self.Labelframe4)
        self.Entryfs.place(relx=0.519, rely=0.642, height=23, relwidth=0.43
                , bordermode='ignore')
        self.Entryfs.configure(background="white")
        self.Entryfs.configure(font="TkFixedFont")
        self.Entryfs.configure(selectbackground="#c4c4c4")
        self.Entryfs.configure(width=116)
        self.Entryfs.insert(str(0), "250")

        self.Message3 = tk.Message(self.Labelframe4)
        self.Message3.place(relx=0.019, rely=0.642, relheight=0.094
                , relwidth=0.489, bordermode='ignore')
        self.Message3.configure(text='''Sample rate [MS/s]''')
        self.Message3.configure(width=132)

        self.Button5 = tk.Button(self.Labelframe4)
        self.Button5.place(relx=0.648, rely=0.78, height=31, width=78
                , bordermode='ignore')
        self.Button5.configure(activebackground="#f9f9f9")
        self.Button5.configure(text='''Generate''',  command= lambda: chirpGenerationCallBack(self))
        self.Button5.configure(width=78)

        self.ButtonSaveSignal = tk.Button(self.Labelframe4)
        self.ButtonSaveSignal.place(relx=0.6, rely=0.89, height=31, width=98
                , bordermode='ignore')
        self.ButtonSaveSignal.configure(activebackground="#f9f9f9")
        self.ButtonSaveSignal.configure(text='''Save Signal''') # command= lambda: chirpGenerationCallBack(self))
        self.ButtonSaveSignal.configure(width=78)

if __name__ == '__main__':
    vp_start_gui()





